public interface I { public void foo(); }
public class C implements I {
	public void foo() { System.out.println("C.foo"); }
	public void bar() { System.out.println("C.bar"); }
}

public static void main(String[] args) {
	I i = new C(); 
	i.foo(); // (A) 
	i.bar(); // (B)
}
 /*
  * (A)
  * 1. Does the line of code type check? 
  * -Yes
  * 2. If so, what is the output?
  * -The output is the string "C.foo"
  * 
  * (B)
  * 1. Does the line of code type check? 
  * -No
  * 2. If so, what is the output?
  * ----
  * 
  * Recall that the static type of i is I and the dynamic type is C. 
  * What does this exercise tell you about how precise subtyping is? 
  * In particular, is there code that is safe but rejected by Javaâ€™s type system?
  * 
  * 
  */
